// new Toollee({
//   $target: Node,
//   content: 'Привет! Я Toolle - веселые подсказки', // tooltip conten: string or HTML
//   placement: 'top',              // placement if the tooltip to the target node: top, bottom, left, right
//   block: true,                   // blocking the position by trigger: true, false
//   trigger: 'click',              // blocking position trigger: click, focuse, clik-focuse
//   arrowPos: 'center',            // arrow position: left, right, center
//   arrowW: 15,                    // arrow width
//   arrowH: 10,                    // arrow height
//   margin: 6,                 // arrow margin from the target
//   arrowOffset: 0,                 // arrow margin from the edge tooltipe (if arrowPos not center)
//   theme: 'black',                // tooltip desing theme: 'black', 'white', ....
//   customClass: 'user-toollee',    // custom class name
// })

export class Toollee {

  _$target = document.createElement('div')
  _content = 'Привет! Я Toolle - веселые подсказки'    // tooltip conten: string or HTML
  _placement = 'top'              // placement if the tooltip to the target node: top, bottom, left, right
  _block = true                   // blocking the position by trigger: true, false
  _trigger = 'click'              // blocking position trigger: click, focuse, clik-focuse
  _arrowPos = 'center'            // arrow position: start, end, center
  _arrowW = 15                    // arrow width
  _arrowH = 10                    // arrow height
  _margin = 6                 // arrow margin from the target
  _arrowOffset = 0                 // arrow margin from the edge tooltipe (if arrowPos not center)
  _theme = 'black'                // tooltip desing theme: 'black', 'white', 'blue'....
  _customClass = 'user-toollee'    // custom class name

  _offsetValX = 0
  _offsetValY = 0
  _offsetDirX = ''
  _offsetDirY = ''
  _arrowDirX = ''
  _arrowDirY = ''
  _arrowValX = 0
  _arrowValY = 0

  constructor(options) {
    // option
    if ('$target' in options) this.$target = options.$target
    else this.$target = this._$target

    this.$content = document.createElement('div')
    if ('content' in options) {
      if (typeof options.content == 'string')  this.splicingText(options.content, this.$content)
      else this.$content.append(options.content)
    }
    else this.splicingText(this._content, this.$content)

    if (options.placement == 'top' ||
        options.placement == 'bottom' ||
        options.placement == 'left' ||
        options.placement == 'right') this.placement = options.placement
    else this.placement = this._placement

    if (options.block === true || options.block === false) this.block = options.block
    else this.block = this._block

    if (options.trigger == 'click' ||
        options.trigger == 'focuse' ||
        options.trigger == 'click-focuse') this.trigger = options.trigger
    else this.trigger = this._trigger

    if (options.arrowPos == 'center' ||
        options.arrowPos == 'start' ||
        options.arrowPos == 'end') this.arrowPos = options.arrowPos
    else this.arrowPos = this._arrowPos

    if ('arrowW' in options) this.arrowW = Number(options.arrowW)
    else this.arrowW = this._arrowW

    if ('arrowH' in options) this.arrowH = Number(options.arrowH)
    else this.arrowH = this._arrowH

    if ('margin' in options) this.margin = Number(options.margin)
    else this.margin = this._margin

    if (options.theme == 'black' ||
        options.theme == 'white' ||
        options.theme == 'blue') this.theme = options.theme
    else this.theme = this._theme

    if ('customClass' in options) this.customClass = options.customClass
    else this.customClass = this._customClass

    this.triggerRemove = false

    // layout
    this.$tooltip = document.createElement('div')
    this.$arrow = document.createElement('div')
    this.$container = document.createElement('div')

    this.$tooltip.classList.add('toollee', `${this.customClass}`, `toollee-theme--${this.theme}`)
    this.$container.classList.add('toollee__container', `${this.customClass}__container`)
    this.$arrow.classList.add('toollee__arrow', `${this.customClass}__arrow`, `toollee-theme--${this.theme}`)

    this.$content.classList.add('toollee__content', `${this.customClass}__content`)
    this.$target.classList.add('toollee--target')

    this.$tooltip.style.position = 'absolute'
    this.$arrow.style.position = 'absolute'
    this.$arrow.style.width = '0'
    this.$arrow.style.height = '0'
    this.$arrow.style['border-left-width'] = `${this.arrowW / 2}px`
    this.$arrow.style['border-right-width'] = `${this.arrowW / 2}px`
    this.$arrow.style['border-top-width'] = `${this.arrowH}px`

    this.$container.append(this.$content)
    this.$tooltip.append(this.$container, this.$arrow)

    this.$target.addEventListener('mouseover', () => {
      this.addTooltip()
    })

    this.$target.addEventListener('mouseout', () => {
      this.removeTooltip()
    })

    if (this.block) this.$target.addEventListener('click', () => {
      this.triggerRemove = !this.triggerRemove
    })

  }

  addTooltip() {
    this.$target.append(this.$tooltip)

    let targetPos = this.$target.getBoundingClientRect()
    let tooltipPos = this.$tooltip.getBoundingClientRect()

    // positioning tooltip
    switch (this.placement) {
      case 'top':
        this._offsetDirY = 'bottom'
        this._arrowDirY = 'top'
        this.positionX(tooltipPos, targetPos)
        break;
      case 'bottom':
        this._offsetDirY = 'top'
        this._arrowDirY = 'bottom'
        this.positionX(tooltipPos, targetPos)
        break;
      case 'left':
        this._offsetDirX = 'right'
        this._arrowDirX = 'left'
        this.positionY(tooltipPos, targetPos)
        break;
      case 'right':
        this._offsetDirX = 'left'
        this._arrowDirX = 'right'
        this.positionY(tooltipPos, targetPos)
        break;
    }

    this.$tooltip.style[this._offsetDirX] = `${this._offsetValX}px`
    this.$tooltip.style[this._offsetDirY] = `${this._offsetValY}px`
    this.$arrow.style[this._arrowDirX] = `${this._arrowValX}px`
    this.$arrow.style[this._arrowDirY] = `${this._arrowValY}px`
    this.arrowRotate(tooltipPos)
  }

  removeTooltip() {
    if (!this.triggerRemove) this.$target.removeChild(this.$tooltip)
  }

  arrowRotate() {
    let rotate = 0
    switch (this.placement) {
      case 'bottom':
        rotate = 180
        break;
      case 'left':
        rotate = 270
        break;
      case 'right':
        rotate = 90
        break;
    }
    this.$arrow.style.transform = `rotate(${rotate}deg)`
  }

  positionX (tooltipPos, targetPos) {
    this._offsetValY = targetPos.height + this.arrowH + this.margin
    this._arrowValY = tooltipPos.height

    switch (this.arrowPos) {
      case 'start':
        this._offsetDirX = 'left'
        this._offsetValX = - (this.arrowW / 2 - targetPos.width / 2 + this.arrowOffset)
        this._arrowDirX = 'left'
        this._arrowValX = this.arrowOffset
      break;
      case 'center':
        this._offsetDirX = 'left'
        this._offsetValX = -(tooltipPos.width / 2 - targetPos.width / 2)
        this._arrowDirX = 'left'
        this._arrowValX = tooltipPos.width / 2 - this.arrowW / 2
      break;
      case 'end':
        this._offsetDirX = 'right'
        this._offsetValX = - (this.arrowW / 2 - targetPos.width / 2 + this.arrowOffset)
        this._arrowDirX = 'right'
        this._arrowValX = this.arrowOffset
      break;
    }
  }

  positionY (tooltipPos, targetPos) {
    this._offsetValX = targetPos.width + this.arrowH + this.margin
    this._arrowValX = tooltipPos.width - (this.arrowW - this.arrowH) / 2

    switch (this.arrowPos) {
      case 'start':
        this._offsetDirY = 'top'
        this._offsetValY = - this.arrowOffset - this.arrowW / 2 + targetPos.height / 2
        this._arrowDirY = 'top'
        this._arrowValY = this.arrowOffset - (this.arrowH - this.arrowW) / 2
      break;
      case 'center':
        this._offsetDirY = 'top'
        this._offsetValY = - (tooltipPos.height / 2 - targetPos.height / 2)
        this._arrowDirY = 'top'
        this._arrowValY = tooltipPos.height / 2 - this.arrowH / 2
      break;
      case 'end':
        this._offsetDirY = 'bottom'
        this._offsetValY =  - this.arrowOffset - this.arrowW / 2 + targetPos.height / 2
        this._arrowDirY = 'bottom'
        this._arrowValY = this.arrowOffset - (this.arrowH - this.arrowW  ) / 2
      break;
    }
  }

  splicingText(str, container) {
    this.array = str.split(' ')
    for (const word of this.array) {
      this.word = document.createElement('span')
      this.word.textContent = word
      container.append(this.word)
    }
  }
};

